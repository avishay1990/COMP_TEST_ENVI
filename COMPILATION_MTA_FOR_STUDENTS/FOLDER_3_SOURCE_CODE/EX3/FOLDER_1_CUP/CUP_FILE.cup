/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;

parser code
{:
	public Lexer lexer;
	protected PrintWriter file_writer;

	public void SetOutPutFile ( PrintWriter file_writer)
	{
		this.file_writer =file_writer;
	}

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
	this.file_writer.flush();
		String console_output_error = String.format("ERROR >> [%d:%d] ",lexer.getLine(),lexer.getCharPos());
		String fie_output_error = String.format("ERROR(%d)",lexer.getLine());

		System.out.print(console_output_error);
		file_writer.write(fie_output_error);
		file_writer.close();
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s;
:};

/*************/
/* TERMINALS */
/*************/

/*
terminal EQ;
terminal IF;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
*/


terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal SEMICOLON;
//terminal Integer INT;
//terminal String ID;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal COMMA;
terminal DOT;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal String STRING;
terminal COMMENT;

/*************/
/* TERMINALS */
/*************/



terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_DEC		dec;
non terminal AST_DEC_VAR	varDec;
non terminal AST_DEC_FUNC	funcDec;
non terminal AST_DEC_CLASS	classDec;
non terminal AST_DEC_LIST	Program;
non terminal AST_DEC_LIST	cfieldList;
non terminal AST_DEC	cfield;


/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_EXP_VAR	var;
non terminal AST_EXP_CALL	callExp;
non terminal AST_EXP_BINOP	binopExp;
non terminal AST_EXP_LIST	expListComma;


/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_TYPE_NAME		typeName;
non terminal AST_TYPE_NAME_LIST	typeNameListComma;
non terminal AST_TYPE_NAME_LIST	typeNameListSemicolon;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left GT;
precedence left LT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
/*
start with Program;
*/
/********************/
/* DERIVATION RULES */
/********************/


/*
stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					;
*/


Program		::=		dec:d Program:l	{: RESULT = new AST_DEC_LIST(d,l,1);    :}
					| dec:d			{: RESULT = new AST_DEC_LIST(d,null,1); :};

dec			::=		varDec:d		{: RESULT = d; :}
					| funcDec:d		{: RESULT = d; :}
					| classDec:d	{: RESULT = d; :};

varDec		::=		ID:type ID:var SEMICOLON	            {: RESULT = new AST_DEC_VAR(type,var,null); :}
					| ID:type ID:var ASSIGN exp:e SEMICOLON {: RESULT = new AST_DEC_VAR(type,var,e);    :};

funcDec		::=		ID:ret ID:name LPAREN typeNameListComma:tnl RPAREN LBRACE stmtList:body RBRACE
					{: RESULT = new AST_DEC_FUNC(ret,name,tnl,body); :}
					| ID:ret ID:name LPAREN RPAREN LBRACE stmtList:body RBRACE
					{: RESULT = new AST_DEC_FUNC(ret,name,null,body); :};

classDec	::=		CLASS ID:name LBRACE cfieldList:l RBRACE	{: RESULT = new AST_DEC_CLASS(name,l); :}
					|			CLASS ID:name EXTENDS ID  LBRACE cfieldList:l RBRACE	{: RESULT = new AST_DEC_CLASS(name,l); :} ;

exp				::=		var:v		{: RESULT = v; :}
					| 		LPAREN exp:e RPAREN {: RESULT = e; :}
					|   	binopExp:e	{: RESULT = e; :}
					|	 		callExp:e		{: RESULT = e; :}
					| 		INT:i			{: RESULT = new AST_EXP_INT(i);    :}
					| 		MINUS {: RESULT = null;    :}
					|			NIL {: RESULT = null;    :};


var				::=		ID:name							{: RESULT = new AST_EXP_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName		{: RESULT = new AST_EXP_VAR_FIELD(v,fieldName); :};



stmtList	::=		stmt:s stmtList:l	{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s			{: RESULT = new AST_STMT_LIST(s,null); :};

stmt		::=		varDec:v                                                    {: RESULT = new AST_STMT_DEC_VAR(v);       :}
					| var:v ASSIGN NEW ID:name SEMICOLON							{:  RESULT = new AST_STMT_ASSIGN_NEW(v,name);      :}
					| var:v ASSIGN exp:e SEMICOLON							{:  RESULT = new AST_STMT_ASSIGN(v,e);      :}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e);        :}
					| RETURN SEMICOLON									{: RESULT = new AST_STMT_RETURN(null);        :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| callExp:callExp SEMICOLON									{: RESULT = new AST_STMT_CALL(callExp);    :};

cfieldList		::=		cfield:d cfieldList:l	{: 	 RESULT = new AST_DEC_LIST(d,l,2);    :}
					| cfield:d			{: RESULT = new AST_DEC_LIST(d,null,2); :};

cfield			::=		varDec:d		{: RESULT = d; :}
					| funcDec:d		{: RESULT = d; :};


binopExp	::=		exp:e1 PLUS exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,0); :}
					|			exp:e1 MINUS exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,1); :}
					| exp:e1 TIMES exp:e2	{: RESULT = new AST_EXP_BINOP(e1,e2,2); :}
					| exp:e1 DIVIDE exp:e2	{: RESULT = new AST_EXP_BINOP(e1,e2,3); :}
					| exp:e1 LT exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,4); :}
					| exp:e1 GT exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,5); :}
					| exp:e1 EQ exp:e2		{: RESULT = new AST_EXP_BINOP(e1,e2,6); :};

callExp		::= var:v DOT ID:funcName LPAREN expListComma:el RPAREN	{: RESULT = new AST_EXP_CALL(funcName,el); :}
					|	ID:funcName LPAREN expListComma:el RPAREN	{: RESULT = new AST_EXP_CALL(funcName,el); :};

expListComma	::=		exp:e COMMA expListComma:el	{: RESULT = new AST_EXP_LIST(e,el);   :}
						| exp:e						{: RESULT = new AST_EXP_LIST(e,null); :}
						| 				{: RESULT = new AST_EXP_LIST(null,null); :};

typeName				::=		ID:type ID:name									{: RESULT = new AST_TYPE_NAME(type,name);    :};
typeNameListComma		::=		typeName:tn COMMA typeNameListComma:tnl			{: RESULT = new AST_TYPE_NAME_LIST(tn,tnl);  :}
								| typeName:tn									{: RESULT = new AST_TYPE_NAME_LIST(tn,null); :};
